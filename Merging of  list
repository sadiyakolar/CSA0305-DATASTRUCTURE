#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

// Function to check if a string is valid (not NULL, not empty, not just whitespace)
int isValidString(const char *str) {
    if (str == NULL) {
        return 0; // Invalid
    }
    int i = 0;
    while (str[i] != '\0') {
        if (!isspace((unsigned char)str[i])) {
            return 1; // Valid
        }
        i++;
    }
    return 0; // Invalid
}

// Function to check if a string exists in an array (to avoid duplicates)
int stringExists(const char *str, const char **arr, int size) {
    if (!isValidString(str)) {
        return 0; // Invalid strings are not considered duplicates
    }
    for (int i = 0; i < size; i++) {
        if (arr[i] != NULL && strcmp(str, arr[i]) == 0) {
            return 1; // String found
        }
    }
    return 0; // String not found
}

// Function to merge two string arrays, excluding invalid strings and duplicates
char **mergeStringLists(const char **list1, int size1, const char **list2, int size2, int *mergedSize) {
    // Calculate max possible size for merged array
    int maxSize = size1 + size2;
    char **merged = (char **)malloc(maxSize * sizeof(char *));
    if (merged == NULL) {
        *mergedSize = 0;
        return NULL; // Memory allocation failed
    }

    int index = 0;

    // Add valid strings from list1, no duplicates
    for (int i = 0; i < size1; i++) {
        if (isValidString(list1[i]) && !stringExists(list1[i], merged, index)) {
            merged[index] = strdup(list1[i]); // Copy string
            if (merged[index] == NULL) {
                // Free allocated memory on failure
                for (int j = 0; j < index; j++) {
                    free(merged[j]);
                }
                free(merged);
                *mergedSize = 0;
                return NULL;
            }
            index++;
        }
    }

    // Add valid strings from list2, no duplicates
    for (int i = 0; i < size2; i++) {
        if (isValidString(list2[i]) && !stringExists(list2[i], merged, index)) {
            merged[index] = strdup(list2[i]);
            if (merged[index] == NULL) {
                for (int j = 0; j < index; j++) {
                    free(merged[j]);
                }
                free(merged);
                *mergedSize = 0;
                return NULL;
            }
            index++;
        }
    }

    *mergedSize = index;
    return merged;
}

// Function to free the merged array
void freeMergedList(char **list, int size) {
    for (int i = 0; i < size; i++) {
        free(list[i]);
    }
    free(list);
}

int main() {
    // Example lists
    const char *list1[] = {"hello", "  ", NULL, "world", "hello"};
    const char *list2[] = {"world", "", "test", "  hello  "};
    int size1 = 5;
    int size2 = 4;

    // Merge lists
    int mergedSize;
    char **mergedList = mergeStringLists(list1, size1, list2, size2, &mergedSize);

    // Print results
    if (mergedList == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    printf("Merged List (%d elements):\n", mergedSize);
    for (int i = 0; i < mergedSize; i++) {
        printf("%d: %s\n", i + 1, mergedList[i]);
    }

    // Clean up
    freeMergedList(mergedList, mergedSize);
    return 0;
}
