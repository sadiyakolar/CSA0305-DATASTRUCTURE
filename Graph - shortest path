#include <stdio.h>
#include <limits.h>

#define MAX 100 // Maximum number of vertices

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], int visited[], int V) {
    int min = INT_MAX, min_index = -1;
    
    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the shortest path from source to a vertex
void printPath(int parent[], int j) {
    if (parent[j] == -1) { // Base case: source vertex
        printf("%d ", j);
        return;
    }
    printPath(parent, parent[j]);
    printf("%d ", j);
}

// Function to implement Dijkstra's algorithm
void dijkstra(int graph[MAX][MAX], int V, int src) {
    int dist[MAX];     // Stores shortest distances from source
    int visited[MAX];  // Tracks visited vertices
    int parent[MAX];   // Stores the parent of each vertex in the shortest path
    
    // Initialize distances, visited array, and parent array
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
        parent[i] = -1;
    }
    
    dist[src] = 0; // Distance to source is 0
    
    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited, V);
        if (u == -1) break; // No more reachable vertices
        visited[u] = 1;
        
        // Update distances of adjacent vertices
        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }
    
    // Print the shortest distances and paths
    printf("Shortest distances from vertex %d:\n", src);
    printf("Vertex\tDistance\tPath\n");
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX) {
            printf("%d\tUnreachable\tNo path\n", i);
        } else {
            printf("%d\t%d\t\t", i, dist[i]);
            printPath(parent, i);
            printf("\n");
        }
    }
}

int main() {
    int V, src;
    
    // Input number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    
    if (V <=
